{"ast":null,"code":"import './App.css';\n\n/*\n\nimport React, { useState , useEffect} from 'react';\nimport PokemonList from './components/PokemonList';\nimport PokemonDetails from './components/PokemonDetails';\nimport Pagination from './components/Pagination';\n\n\nfunction App() {\n  const [selectedPokemonUrl, setSelectedPokemonUrl] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const handlePokemonClick = (pokemonUrl) => {\n    setSelectedPokemonUrl(pokemonUrl);\n  };\n\n  const fetchPokemon = async (page) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`https://pokeapi.co/api/v2/pokemon?offset=${(page - 1) * 20}&limit=20`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch Pokemon');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching Pokemon:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChange = async (page) => {\n    setCurrentPage(page);\n    const data = await fetchPokemon(page);\n    setTotalPages(Math.ceil(data.count / 20));\n  };\n\n  useEffect(() => {\n    handlePageChange(currentPage);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Pokedex</h1>\n      <PokemonList currentPage={currentPage} onPageChange={handlePageChange} onPokemonClick={handlePokemonClick} loading={loading} />\n      <PokemonDetails pokemonUrl={selectedPokemonUrl} />\n      <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />\n    </div>\n  );\n}\n\nexport default App;\n*/","map":{"version":3,"names":[],"sources":["C:/Users/brixe/Desktop/pokedex-app/src/App.js"],"sourcesContent":["\nimport './App.css'\n\n\n\n/*\n\nimport React, { useState , useEffect} from 'react';\nimport PokemonList from './components/PokemonList';\nimport PokemonDetails from './components/PokemonDetails';\nimport Pagination from './components/Pagination';\n\n\nfunction App() {\n  const [selectedPokemonUrl, setSelectedPokemonUrl] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const handlePokemonClick = (pokemonUrl) => {\n    setSelectedPokemonUrl(pokemonUrl);\n  };\n\n  const fetchPokemon = async (page) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`https://pokeapi.co/api/v2/pokemon?offset=${(page - 1) * 20}&limit=20`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch Pokemon');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching Pokemon:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChange = async (page) => {\n    setCurrentPage(page);\n    const data = await fetchPokemon(page);\n    setTotalPages(Math.ceil(data.count / 20));\n  };\n\n  useEffect(() => {\n    handlePageChange(currentPage);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Pokedex</h1>\n      <PokemonList currentPage={currentPage} onPageChange={handlePageChange} onPokemonClick={handlePokemonClick} loading={loading} />\n      <PokemonDetails pokemonUrl={selectedPokemonUrl} />\n      <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />\n    </div>\n  );\n}\n\nexport default App;\n*/\n"],"mappings":"AACA,OAAO,WAAW;;AAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}